import cv2
from IPython.display import Image, display

from .video_funcs import annotated_video_frames_generator


def show_frame_in_notebook(cv2_frame, display_handle=None):
    """
    Displays a single frame in a Jupyter notebook. The frame is displayed as an IPython Image object in the notebook.

    :param cv2_frame: The frame to be displayed
    :type cv2_frame: np.ndarray
    :param display_handle: The handle to the display object. If None, a new display object will be created
    :type display_handle: IPython.display.display
    :rtype: None
    """

    if display_handle is None:
        display_handle = display(None, display_id=True)

    if cv2_frame is not None:
        _, frame = cv2.imencode(".png", cv2_frame)
        frame = Image(data=frame.tobytes())
    else:
        frame = None

    display_handle.update(frame)


def show_video_in_notebook(video_path, hide_last_frame=False, **generator_kwargs):
    """
    Displays the frames of a video in a Jupyter notebook. The video is displayed as a series of
    images, one after the other. The video frames are generated by and the generator_kwargs are passed to the
    annotated_video_frames_generator function from the video_funcs module.
    See the documentation for annotated_video_frames_generator for more information.

    :param video_path: Path to the video file
    :type video_path: str
    :param hide_last_frame: If True, the last frame of the video will be hidden after the video is done playing
    :type hide_last_frame: bool
    :param generator_kwargs: Keyword arguments passed to the annotated_video_frames_generator function from the
        video_funcs module (see the documentation for annotated_video_frames_generator for more information)
    :type generator_kwargs: dict
    :rtype: None
    """

    display_handle = display(None, display_id=True)
    frame_iterator = annotated_video_frames_generator(video_path, **generator_kwargs)

    try:
        for annotated_frame in frame_iterator:
            show_frame_in_notebook(annotated_frame, display_handle=display_handle)
    except KeyboardInterrupt:
        pass
    finally:
        if hide_last_frame:
            show_frame_in_notebook(None, display_handle=display_handle)


def notebook_variable_reset(vars_to_keep=None, vars_to_delete=None, keep_reset_function=True):
    """
    From https://stackoverflow.com/a/49517289.
    Takes an optional list of variables to keep and delete. If vars_to_keep is None, all variables are kept. If
    vars_to_delete is None, no variables are deleted. If keep_reset_function is True, the notebook_variable_reset
    function is kept. Deletion takes precedence over keeping.
    Can only be used in a Jupyter notebook.

    :param vars_to_keep: A list of variables to keep
    :type vars_to_keep: list
    :param vars_to_delete: A list of variables to delete
    :type vars_to_delete: list
    :param keep_reset_function: Whether to keep the notebook_variable_reset function
    :type keep_reset_function: bool
    """
    from IPython import get_ipython

    globals_ = globals()
    if vars_to_keep is None:
        vars_to_keep = globals_.keys()
    if vars_to_delete is None:
        vars_to_delete = []
    vars_to_keep = set(vars_to_keep) - set(vars_to_delete)
    saved_globals = {var: globals_[var] for var in vars_to_keep}
    if keep_reset_function:
        saved_globals['notebook_variable_reset'] = notebook_variable_reset
    del globals_
    get_ipython().magic("reset")
    globals().update(saved_globals)
